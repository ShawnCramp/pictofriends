#!/usr/bin/env node

/**
 * Define Array Remove
 */
Array.prototype.remove = function() {
    var what, a = arguments, L = a.length, ax;
    while (L && this.length) {
        what = a[--L];
        while ((ax = this.indexOf(what)) !== -1) {
            this.splice(ax, 1);
        }
    }
    return this;
};

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('pictofriends:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '7292');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Socket.io
 */
var io = require('socket.io').listen(server.listen(port));
var usercount = 0;
var userlist = [];

// List of drawing Ideas for Picto
var drawingList = ["house", "tree", "sun", "dog", "clock", "basketball", "apple", "alligator",
    "cow", "cape", "saddle", "violin", "goldfish", "mailbox", "gingerbread", "windmill", "pizza",
    "wrench", "flamingo", "taco"];
var drawingIndex = 0;
var drawingUserIndex = 0;
var drawingUser = "";
var gameInProgress = false;

/**
 * Socket.io Event Handler Picto
 */
var picto = io
    .of('/picto')
    .on("connection", function (socket) {

        /* ---------------------------
            Run On Socket Connection
        --------------------------- */
        console.log("A User has Connected");
        usercount += 1;
        picto.emit('userCount', userlist.length);

        /**
         *  Listen/emit for Canvas
         */
        socket.on('draw', function (data) {
            console.log("on draw from the server");
            console.log("Data Drawing User: " + data.name);

            if (data.name == drawingUser) {
                // Data is sent in as: {x: data.x, y: data.y, type: data.type }
                picto.emit('draw', data);
            }

        });


        /**
         *  Listen/emit for Chat
         */
        socket.on('chatMessage', function(message){

            // Handle
            if (gameInProgress == true) {

                // Log Game Progress
                console.log("Game in Progress: " + gameInProgress);
                console.log("Current Drawing: " + drawingList[drawingIndex]);

                if (message.text == drawingList[drawingIndex] && message.name != drawingUser) {
                    newRound(message.name);
                }

            }

            picto.emit('chatMessage', message);
        });

        /**
         *  Listen and emit that user joined
         */
        socket.on('userJoined', function(user) {

            // Add User to Userlist
            userlist.push(user.name);

            // Log Userlist for Debug
            console.log("User List: " + userlist);

            // Start Game if User Count is 2 or more and game not in progress
            if (userlist.length >= 2 && gameInProgress == false) {
                startPicto();
            }

            // Send User Joined Chat
            picto.emit('userJoined', user, userlist)
        });

        /**
         *  Listen and emit that user has left
         */
        socket.on('userLeft', function(user) {
            console.log('User Left');
            console.log(user);

            // Edit Userlist
            if (user != "") {
                userlist.remove(user);
                console.log("User List: " + userlist);
            }

            picto.emit('userLeft', user, userlist);
        });


        /**
         *  List and emit that User Disconnected
         */
        socket.on('disconnect', function(user) {
            console.log("User Disconnected");
            console.log("User List Length: " + userlist.length.toString());

            if (userlist.length < 2) {
                endPicto();
            }

            picto.emit('userCount', userlist.length);
        });


        /**
         * Handle Start of Picto Game
         */
        function startPicto () {

            //
            console.log("Starting Picto Game");
            gameInProgress = true;
            drawingUserIndex = 0;
            drawingIndex = 0;
            drawingUser = userlist[drawingUserIndex];

            // Log Current Drawing User
            console.log("Current Drawing User: " + drawingUser);
            console.log("Current Drawing: " + drawingList[drawingIndex]);

            // Emit Current Drawing User and Current Drawing
            picto.emit('gameStart');
            picto.emit('drawingUser', drawingList[drawingIndex], drawingUser);
        }

        /**
         * Handle New Round of Picto Game
         */
        function newRound (name) {

            // Sanity
            console.log("New Round");

            drawingUserIndex += 1;
            drawingIndex += 1;
            if (drawingUserIndex >= userlist.length) {
                drawingUserIndex = 0;
            }
            if (drawingIndex >= drawingList.length) {
                drawingIndex = 0;
            }

            // Set new Drawer and Idea
            drawingUser = userlist[drawingUserIndex];

            // Log Current Drawing User
            console.log("Current Drawing User: " + drawingUser);
            console.log("Current Drawing: " + drawingList[drawingIndex]);

            picto.emit('winnerNotify', name);
            picto.emit('drawingUser', drawingList[drawingIndex], drawingUser);
        }

        /**
         * Handle Ending Picto Game
         */
        function endPicto () {
            gameInProgress = false;
            drawingUserIndex = 0;
            drawingIndex = 0;
            drawingUser = "";

            picto.emit('endingNotify');
            picto.emit('drawingUser', "", "");
        }
    });


/**
 * Socket.io Event Handler Picto
 */
var free = io
    .of('/freedraw')
    .on("connection", function (socket) {

        /* ---------------------------
         Run On Socket Connection
         --------------------------- */
        console.log("A User has Connected");
        usercount += 1;
        free.emit('userCount', userlist.length);

        /**
         *  Listen/emit for Canvas
         */
        socket.on('draw', function (data) {
            console.log("on draw from the server");
            console.log("Data Drawing User: " + data.name);

            free.emit('draw', data);
        });


        /**
         *  Listen/emit for Chat
         */
        socket.on('chatMessage', function(message){

            free.emit('chatMessage', message);
        });

        /**
         *  Listen and emit that user joined
         */
        socket.on('userJoined', function(user) {

            // Add User to Userlist
            userlist.push(user.name);

            // Log Userlist for Debug
            console.log("User List: " + userlist);

            // Send User Joined Chat
            free.emit('userJoined', user, userlist)
        });

        /**
         *  Listen and emit that user has left
         */
        socket.on('userLeft', function(user) {
            console.log('User Left');
            console.log(user);

            // Edit Userlist
            if (user != "") {
                userlist.remove(user);
                console.log("User List: " + userlist);
            }

            free.emit('userLeft', user, userlist);
        });


        /**
         *  List and emit that User Disconnected
         */
        socket.on('disconnect', function(user) {
            console.log("User Disconnected");
            console.log("User List Length: " + userlist.length.toString());

            free.emit('userCount', userlist.length);
        });

    });


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
