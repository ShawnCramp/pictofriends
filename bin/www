#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('pictofriends:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Socket.io
 */
var io = require('socket.io').listen(server.listen(port));
var usercount = 0;
var userlist = [];

io.sockets.on("connection", function (socket) {
    console.log("A User has Connected");
    usercount += 1;
    io.emit('user count', userlist.length);

    // Listen/emit for Canvas
    socket.on('draw', function (data) {
        console.log("on draw from the server");
        // Data is sent in as: {x: data.x, y: data.y, type: data.type }
        io.emit('draw', data);
    });

    // Listen/emit for Chat
    socket.on('chat message', function(message){
        io.emit('chat message', message);
    });

    // Listen and emit that user joined
    socket.on('user joined', function(user) {

        // Add User to Userlist
        userlist.push(user.name);

        // Log Userlist for Debug
        console.log("User List: " + userlist);

        io.emit('user joined', user, userlist)
    });

    // Listen and emit that user has left
    socket.on('user left', function(user) {
        console.log('User Left');
        console.log(user);

        // Edit Userlist
        userlist.pop(user);
        console.log("User List: " + userlist);

        io.emit('user left', user, userlist);
    });

    // List and emit that User Disconnected
    socket.on('disconnect', function(user) {
        console.log("User Disconnected");
        console.log("User List Length: " + userlist.length.toString());
        io.emit('user count', userlist.length);
    });
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
